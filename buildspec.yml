---
version: 0.2


phases:
  install:
    runtime-versions:
      python: 3.7
    commands:
      - echo 'about to call dockerd'
      - nohup /usr/local/bin/dockerd --host=unix:///var/run/docker.sock --host=tcp://127.0.0.1:2375 --storage-driver=overlay2&
      - timeout 15 sh -c "until docker info; do echo .; sleep 1; done"
      - curl -sS -o aws-iam-authenticator https://amazon-eks.s3-us-west-2.amazonaws.com/1.10.3/2018-07-26/bin/linux/amd64/aws-iam-authenticator
      # Get latest stable release kubectl
      - curl -LO https://storage.googleapis.com/kubernetes-release/release/`curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt`/bin/linux/amd64/kubectl
        # Command for specific kubectl version:
        #- curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.18.0/bin/linux/amd64/kubectl
      - chmod +x ./kubectl ./aws-iam-authenticator
      - echo `kubectl version`
      - export PATH=$PWD/:$PATH
      - python -m pip install --upgrade --force pip
      - apt-get update && apt-get -y install jq  && pip install --upgrade awscli
  pre_build:
      commands:
        - TAG="$REPOSITORY_NAME.$REPOSITORY_BRANCH.$ENVIRONMENT_NAME.$(date +%Y-%m-%d.%H.%M.%S).$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | head -c 8)"
        - sed -i 's@CONTAINER_IMAGE@'"$REPOSITORY_URI:$TAG"'@' simple_jwt_api.yml
        - $(aws ecr get-login --no-include-email)
        - export KUBECONFIG=$HOME/.kube/config
  build:
    commands:
      - docker build --tag $REPOSITORY_URI:$TAG .

  post_build:
    commands:
      - docker push $REPOSITORY_URI:$TAG
      - aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --role-arn $EKS_KUBECTL_ROLE_ARN
      - kubectl apply -f simple_jwt_api.yml 
      - printf '[{"name":"simple_jwt_api","imageUri":"%s"}]' $REPOSITORY_URI:$TAG > build.json
      - CREDENTIALS=$(aws sts assume-role --role-arn $EKS_KUBECTL_ROLE_ARN --role-session-name codebuild-kubectl --duration-seconds 900)
      - export AWS_ACCESS_KEY_ID="$(echo ${AKIA5NEHRYLOBGDTWFTO} | jq -r '.Credentials.AccessKeyId')"
      - export AWS_SECRET_ACCESS_KEY="$(echo ${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} | jq -r '.Credentials.SecretAccessKey')"
      - export AWS_SESSION_TOKEN="$(echo ${FwoGZXIvYXdzEMv//////////wEaDK6hIF/sL3wsbYz0DiK8ARn3NIdss5s4gBTd7sItVW3TsQuhi6I/5u8gDfx3ZEHLnTgFYgr+a5Ah8GuUQidOmMzIjB/9JJ8nnsisBs5VGxvEdm7jN/7MisqmuEJ+6EF001NaQUwLFVmEUOW33pblcZuUL+ekFGbC8JSQcU167ziv5bzbQvzahDWMVEvW9IGgGb4AX7gvbWg5eMgj6Wq5P2lxo2AwkcHUTKpYHc3xtof/9f3vHujAGZ0Lhw1irzgChcCizwO+BTY4n0oDKLD3vokGMi0YuQYioMOxgy8vn7fUDmUVe6dpNtqmHhPfPcyOusFuVv4DTovtFYcbAmG1CMA=} | jq -r '.Credentials.SessionToken')"
artifacts:
  files: build.json

env:
  parameter-store:
    JWT_SECRET: JWT_SECRET


